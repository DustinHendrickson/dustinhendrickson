<?php
//Writes to a specified LOG file.
function Write_Log($log, $logEntry, $logPath='logs/')
{
    //Setup the variables needed.
    $NOW = date("h:ia m-d-Y");
    $logPath = $GLOBALS["Path"] . $logPath;

    //If this event was generated by a user attach an IP, otherwise denote it.
    if($_SERVER['REMOTE_ADDR']!='127.0.0.1') { 
        $IP = $_SERVER['REMOTE_ADDR'];
    } else {
        $IP = "System Process";
    }

    //Here is where we check if the log already exists, if not go ahead and create it with the w+ flag.
    //We then setup a new logfile object and open the file.
    if (!file_exists($logPath.$log.'.log')) {
        fopen($logPath . $log . '.log', 'w+');
    }
    $logFile = fopen($logPath . $log . '.log', 'a');

    //We then write to the log and close the file.
    fwrite($logFile,"[".$NOW."] | " . $IP . " | " . $logEntry . " >> " . $_SERVER['REQUEST_URI'] ."\n");
    fclose($logFile);
}

//This functions provides CSS coloring to log files depending on the setup inside.
function Color_Log_Entry($logLine='')
{
    $Color_Types[] = array();
    //Here is where we config which tag get's which color.
    //These are defined in frontend.css as .Log{Color}
    $Color_Types["NOTICE"] = 'Orange';
    $Color_Types["ACCOUNT"] = 'Blue';
    $Color_Types["WARNING"] = 'Red';
    $Color_Types["FAIL"] = 'Red';
    $Color_Types["SUCCESS"] = 'Green';
    $Color_Types["DEFAULT"] = 'Grey';

    $Return_String = "<div class='Log{$Color_Types['DEFAULT']}'>" . $logLine . "</div>";
    //Loop through each color option.
    foreach ($Color_Types as $Type => $Color) {
        //If we find a match with the Associate Array's Key in the log, we apply a style.
        if (strripos($logLine, $Type)) {
            $Return_String = "<div class='Log{$Color}'>" . $logLine . "</div>";
        }
    }

    return $Return_String;
}